{"version":3,"sources":["SortingAlgorithms/selectionSort.js","SortingAlgorithms/mergeSort.js","SortingAlgorithms/quickSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getSelectionSortAnimations","array","animations","auxilliaryArray","slice","N","length","i","minIndex","j","push","swap","selectionSort","firstIndex","secondIndex","temp","getMergeSortAnimations","auxillaryArray","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","merge","getQuickSortAnimations","quickSort","pivotIndex","pivot","partitionArray","generateAgain","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","document","getElementById","disabled","buttonStyle","style","cursor","disableButtons","key","insertionSort","getInsertionSortAnimations","sortedArray","isColorChange","arrayBars","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","console","log","RESTORE_TIME","parseInt","restoreButtons","barOneIdx","className","map","value","index","id","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b1f24d0.chunk.js","sourcesContent":["export function getSelectionSortAnimations(array) {\n    let animations = [];\n    let auxilliaryArray = array.slice();\n    selectionSort(auxilliaryArray, animations);\n    array = auxilliaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxilliaryArray, animations) {\n    const N = auxilliaryArray.length;\n\n    for (let i = 0; i < N; i++) {\n        let minIndex = i;\n\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"highlight\", j, minIndex]);\n            animations.push([\"remove\", j, minIndex]);\n\n            if (auxilliaryArray[j] < auxilliaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxilliaryArray[i]]);\n        animations.push([\"swap\", i, auxilliaryArray[minIndex]]);\n        swap(auxilliaryArray, i, minIndex);\n    }\n}\n\nfunction swap(auxilliaryArray, firstIndex, secondIndex) {\n    let temp = auxilliaryArray[firstIndex];\n    auxilliaryArray[firstIndex] = auxilliaryArray[secondIndex];\n    auxilliaryArray[secondIndex] = temp;\n}\n\n","export function getMergeSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if(startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([i, j]);\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\n            //We should overwrite the value at (i+startIndex)th index with ith index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            //We should overwrite the value at (i+startIndex)th index with jth index so push them to highlight swap their heights\n            animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while(j <= endIndex) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}","export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n","import React from 'react';\nimport './SortingVisualizer.css';\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/insertionSort';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/selectionSort';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/mergeSort';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/quickSort';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 2;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 150;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nlet generateAgain = false;\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        }\n    };\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        generateAgain = false;\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(10, 600));\n        }\n        this.setState({array});\n    }\n    \n    disableButtons() {\n        document.getElementById(\"generate\").disabled = true;\n        let buttonStyle = document.getElementById(\"generate\").style;\n        buttonStyle.cursor = \"default\";\n\n        document.getElementById(\"insertionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        buttonStyle.cursor = \"default\";\n\n        document.getElementById(\"selectionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        buttonStyle.cursor = \"default\";\n\n        document.getElementById(\"mergeSort\").disabled = true;\n        buttonStyle = document.getElementById(\"mergeSort\").style;\n        buttonStyle.cursor = \"default\";\n\n        document.getElementById(\"quickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        buttonStyle.cursor = \"default\";\n    }\n\n    restoreButtons() {\n        document.getElementById(\"generate\").disabled = false;\n        let buttonStyle = document.getElementById(\"generate\").style;\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"insertionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"selectionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"mergeSort\").disabled = false;\n        buttonStyle = document.getElementById(\"mergeSort\").style;\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"quickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        buttonStyle.cursor = \"pointer\";\n    }\n\n    insertionSort() {\n        if (generateAgain) {\n            this.resetArray();\n        }\n        this.disableButtons();\n        const [animations, sortedArray] = getInsertionSortAnimations(this.state.array);\n\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"highlight\") || (animations[i][0] === \"remove\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n\n            if (isColorChange) {\n                const color = (animations[i][0] === \"highlight\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS); \n            }\n        }\n        console.log(sortedArray);\n        generateAgain = true;\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    selectionSort() {\n        if (generateAgain) {\n            this.resetArray();\n        }\n        this.disableButtons();\n        const [animations, sortedArray] = getSelectionSortAnimations(this.state.array);\n\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"highlight\") || (animations[i][0] === \"remove\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n\n            if (isColorChange) {\n                const color = (animations[i][0] === \"highlight\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS); \n            }\n        }\n        console.log(sortedArray);\n        generateAgain = true;\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    mergeSort() {\n        if (generateAgain) {\n            this.resetArray();\n        }\n        this.disableButtons();\n        const [animations, sortedArray] = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 3 !== 2);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n                \n            }\n            else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                  },i * ANIMATION_SPEED_MS);\n            }\n        }\n        console.log(sortedArray);\n        generateAgain = true;\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    quickSort() {\n        if (generateAgain) {\n            this.resetArray();\n        }\n        this.disableButtons();\n        const [animations, sortedArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if(barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        console.log(sortedArray);\n        generateAgain = true;\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    render() {\n        const {array} = this.state;\n\n        return ( \n            <>\n            <div className=\"array-container\">\n                {array.map((value, index) => (\n                    <div \n                        className=\"array-bar\" \n                        key={index} \n                        style={{height: `${value}px`}}>\n                    </div>\n                ))}\n            </div>\n            <div className=\"buttons\">\n                <button id=\"generate\" onClick={() => this.resetArray()}>Generate New Array</button>\n                <button id=\"insertionSort\" onClick={() => this.insertionSort()}>Insertion Sort</button>\n                <button id=\"selectionSort\" onClick={() => this.selectionSort()}>Selection Sort</button>\n                <button id=\"mergeSort\" onClick={() => this.mergeSort()}>Merge Sort</button>\n                <button id=\"quickSort\" onClick={() => this.quickSort()}>Quick Sort</button>\n            </div>\n            </>\n        );\n    }\n}\n\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","export function getInsertionSortAnimations(array) {\n    let animations = []\n    let auxilliaryArray = array.slice();\n    insertionSort(auxilliaryArray, animations);\n    array = auxilliaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxilliaryArray, animations) {\n    const N = auxilliaryArray.length;\n\n    for (let i = 1; i < N; i++) {\n        let key = auxilliaryArray[i];\n        let j = i - 1;\n\n        animations.push([\"highlight\", j, i]);\n        animations.push([\"remove\", j, i]);\n\n        while (j >= 0 && key < auxilliaryArray[j]) {\n            animations.push([\"overwrite\", j + 1, auxilliaryArray[j]]);\n            auxilliaryArray[j + 1] = auxilliaryArray[j];\n            j = j - 1;\n\n            if (j >= 0) {\n                animations.push([\"highlight\", j, i]);\n                animations.push([\"remove\", j, i]);\n            }\n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxilliaryArray[j + 1] = key;\n    }\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}